================================================
Neutron OFAgent Third-party Testing 環境構築手順
================================================

概要
====

OpenStack Infra[1]が使用/開発している各種ソフトウェアを使った、OFA Project
のThird-party Testing環境を構築します。

大きく分けるとテストを実行するテストサーバとテスト結果のログを公開するため
のログサーバで構成されます。テストサーバでは、openstack.orgのGerritを監視
してテストを実行するジョブの管理、テスト結果の報告などを行うマスターノード
と、実際の個々のテストを実行するスレーブノードのVMを実行します。


        review.openstack.org
                 |
     +-----------|------ test server ----------------+
     |           |                                   |
     |  +-- master node --+    +-- slave node --+    |
     |  |      Zuul       |    |    devstack    |+   |
     |  |     Gearman     |----|     tempest    ||+  |
     |  |     Jenkins     |    |                |||  |
     |  +-----------------+    +----------------+||  |
     |           |              +----------------+|  |
     |           |               +----------------+  |
     |           |                                   |
     +-----------|-----------------------------------+
                 |
        +-- log server ---+
        |                 | 
        |      Apache     | 
        |                 | 
        +-----------------+

中核となるのはマスターノードで実行されるZuul[2]です。
Zuulは主に下記のような機能を持ちます。
- Gerritストリームイベントを監視。
- テスト実行のスケジューリング。
- Gearmanを経由してJenkinsにテストの実行を指示。
- テスト結果をGerritに報告。
Jenkinsは、実行するテストのジョブを管理し下記の作業を行います。
- Zuulからの指示でテストを実施するスレーブを決定しジョブを実行。
- 同じ gerrit ID のジョブ(古いパッチセット)が既に実行中の場合、キャンセ
  ルして新たなパッチセットでジョブを実行。
- テスト結果のログをログサーバに転送。

スレーブノードでは、Jenkinsからリモート操作でテストが実行されます。主に
devstackの起動とtempestのテストを実行します。テスト後の状態をリセットす
るためにテスト終了後にリブートを行います。リブート前に次のテストが割り
当てられないように、テスト完了時にGearmanによって当該スレーブノードはオ
フラインにされます。スレーブノードは起動時に、JenkinsのCLIを使って自ノー
ドをオンラインにします。


1: https://wiki.openstack.org/wiki/InfraTeam
2: http://ci.openstack.org/zuul/


構築手順
========

基本的に、テスト環境はJay Pipes氏の記事[3]とAkihiro Motoki氏の記事[4]を
参考に構築しました。
必要となるソフトウェアのインストールやセットアップを行うスクリプトは、
Jay Pipes氏が公開しているものやOpenStack InfraのものをOFA Project用に
変更しました。必要な作業は極力スクリプトの実行のみで行われるように
自動化していますが、未対応の作業は手動で行う必要があります。
(Jay Pipes氏のスクリプトは更新されていない為、現状では master とマッチ
しない点が有ります)

3: http://www.joinfu.com/2014/02/setting-up-an-external-openstack-testing-system/
   http://www.joinfu.com/2014/02/setting-up-an-openstack-external-testing-system-part-2/
4: http://ritchey98.blogspot.jp/2014/02/openstack-third-party-testing-how-to.html

テストサーバ
------------

テストサーバで必要となるマシンスペックは以下の通りです。

CPU: Quad core以上のプロセッサ
メモリ: 16GB以上
ディスク: 260GB以上

実際には、稼働させるスレーブノードの数によります。
ディスクについては、ホスト自身10GB、マスターノード10GB、スレーブノード
40GBx台数となり、ここではスレーブノードを6つ用意することを想定し、
10GB + 10GB + 40GB x 6 = 260GBとしています。

マスターノードおよびスレーブノードに割り当てるCPU数、メモリ容量はそれぞれ
1CPU、2GBとしています。スレーブノードに割り当てるメモリ容量は、実行する
テストによります。ここではネットワークのAPIテストのみを実施することを前提
にしています。実際には2GBでは、スワップが使用されますが、テスト時間には
大きな影響が見られませんでした。


テスト環境構成
^^^^^^^^^^^^^^

ここで構築する環境は以下の通りです。


  <Gateway/DNS>
      | .1   master 用                         
  ----+----------+-------------++++++---------- 192.168.122.0/24
                 | .10         |||||| .21〜26
            +----+----+   +----+-----+     
            | master  |   |  slave1  |+    
            |---------|   |----------||+   
            |   Zuul  |   | devstack |||+  
            | Jenkins |   |  tempest ||||+ 
            |     ... |   |      ... |||||+
            +---------+   +----------+|||||
                           +----------+||||
                            +----------+|||
                             +----------+||
                              +----------+|
                               +----------+

OpenStack master テスト用として
- ZuulおよびJenkinsが稼働するマスターノード(master)が1台。
- マスターノードのJenkinsからリモート制御で実際にテストを実行するスレー
  ブノード(slave1〜6)が6台。
の合計7つのVMをテストサーバ上に作成します。
(slave 数はCI の負荷により調整します)
仮想ネットワークはlibvirtの標準(default/NAT)をそのまま使用します。
また、ホストのOS並びにVMのOSには、Ubuntu 14.04 LTS Server 64bit版を使用
します。
slave のノード数や VM のスペックは CI の負荷に応じて変更が必要かもしれ
ません。


インストールスクリプトの準備
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

まず、インストールスクリプトをgithubから取得します。この作業はテストサー
バのホスト上で行うものとします。
リポジトリのソース構成の変化や、devstack-gate の改良により Juno 以前と
以後で CI の構成が異なります。環境構築には下記のブランチを使用下さい。
Juno 以前: ofaci_20141211_latest_jenkins_and_no_split_tree
Kilo 以降: master

    $ git clone https://github.com/osrg/ofaci-inst
    $ ls ofaci-inst
    README.md  data  install_node.sh

変数の設定とSSH鍵の準備を行います。


(1) 変数の設定

ofaci-inst/data/vars.shにインストールスクリプトが使用する各種変数が記述
されているので、環境に合わせて値をセットします。

    $ cat ofaci-inst/data/vars.sh
    export UPSTREAM_GERRIT_HOST_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDtdLzDzG6qmejiZq5BxDqxkN71W08xuQWVZ+6784SpsXTUujKT49lNCXmH+IHijsRaigU9cVFkWErVez0Q+NtUe077c5s50zCrL7EwH5/aiwaYklHF566TO7ctOJBLLsoVOUlJGpUAjM4veG9XMz0KhTP9qYK3zqNOcPV++551bQu1rc3kR8R8C/etmP60zMhVkUAdgyPWFZbmKlrBv1SxIpvjSo5STZzSRS7DK5/D9BaWS3zOcl5Pqtv0FVjm83dmQJxMPEjFo8e0T4Gq/noxYafQse4811/Ucmxj8J5rlJchakfxJz827w3MWYR4Ku+X3QAy/deBuvzUn3z35Zwr"
    export GIT_EMAIL='ryu-openstack-review@lists.sourceforge.net'
    export GIT_NAME='Neutron Ryu'
    export UPSTREAM_GERRIT_USER=neutronryu
    export UPSTREAM_GERRIT_SSH_KEY_PATH=gerrit_key
    export JENKINS_SSH_KEY_PATH=jenkins_key
    export PUBLISH_HOST=master
    export JENKINS_URL=http://master:8080/
    export ZUUL_URL=http://master/p
    export SCP_NAME=cloudn
    export SCP_HOST=180.37.183.32
    export SCP_PORT=48822
    export SCP_USER=jenkins
    export SCP_PASSWORD=
    export SCP_KEYFILE=/var/lib/jenkins/.ssh/id_rsa
    export SCP_DESTPATH=/data/ryuci

=============================== =============================================
UPSTREAM_GERRIT_HOST_PUBLIC_KEY gerritのssh host keyをセットします。この値
                                は、/home/zuul/.ssh/known_hostsの作成で使わ
                                れます。
------------------------------- ---------------------------------------------
GIT_EMAIL                       gitアカウントのメールアドレスです。/etc/zuul/
                                zuul.confのmerger.git_user_emailにセットされ
                                ます。git config user.emailに対応します。
------------------------------- ---------------------------------------------
GIT_NAME                        gitアカウントのユーザ名です。/etc/zuul/zuul.
                                confのmerger.git_user_nameにセットされます。
                                git config user.nameに対応します。
------------------------------- ---------------------------------------------
UPSTREAM_GERRIT_USER            openstack-infraから取得したサービスアカウント
                                のユーザ名です。/etc/zuul/zuul.confのgerrit.
                                userにセットされます。
------------------------------- ---------------------------------------------
UPSTREAM_GERRIT_SSH_KEY         openstack-infraから取得したサービスアカウント
                                のssh private keyのファイル名をセットします。
                                このファイル名に'.pub'を付加したssh public key
                                もセットで必要になります。
------------------------------- ---------------------------------------------
JENKINS_SSH_KEY_PATH            スレーブノードとの通信で使用するssh private
                                keyのファイル名をセットします。このファイル名
                                に'.pub'を付加したssh public keyも必要です。
------------------------------- ---------------------------------------------
PUBLISH_HOST                    公開URLのホスト名をセットします。ジョブ開始
                                時のGerritへのコメントに記載されるstatusページ
                                のURLなどで使われます。/etc/zuul/zuul.confの
                                zuul.status_urlのホスト部にセットされます。
                                OFA CI infraでは使いません。
------------------------------- ---------------------------------------------
JENKINS_URL                     JenkinsのURLをセットします。スレーブノードが
                                リブート時にJenkins CLIを使って自ノードを
                                onlineにする時に使用します。スレーブノードの
                                /etc/default/jenkins-slaveのJENKINS_URLにセッ
                                トされます。
------------------------------- ---------------------------------------------
ZUUL_URL                        zuul-mergerのgitリポジトリのURLをセットします。
                                Jenkinsのジョブ実行時に与えられるパラメータの
                                ZUUL_URLにセットされます。/etc/zuul/zuul.conf
                                のmerger.zuul_urlにセットされます。
------------------------------- ---------------------------------------------
SCP_NAME                        ログサーバへテストログをSCPで転送する設定の
                                設定名をセットします。JenkinsのSCPプラグイン
                                の設定値として使われます。
------------------------------- ---------------------------------------------
SCP_HOST                        テストログの転送先ログサーバ名をセットします。
                                JenkinsのSCPプラグインの設定値として使われま
                                す。
------------------------------- ---------------------------------------------
SCP_PORT                        転送先ログサーバのポート番号をセットします。
                                JenkinsのSCPプラグインの設定値として使われま
                                す。
------------------------------- ---------------------------------------------
SCP_USER                        ログサーバへテストログをSCPで転送する際に使わ
                                れるsshアカウント名をセットします。Jenkinsの
                                SCPプラグインの設定値として使われます。
------------------------------- ---------------------------------------------
SCP_PASSWORD                    ログサーバへテストログをSCPで転送する際に使わ
                                れるsshアカウントのパスワードをセットします。
                                sshキーを使用する場合は、パスワードは使用しま
                                せん。JenkinsのSCPプラグインの設定値として使
                                われます。
------------------------------- ---------------------------------------------
SCP_KEYFILE                     ログサーバへテストログをSCPで転送する際に使わ
                                れるsshキーファイルのパスをセットします。
                                JenkinsのSCPプラグインの設定値として使われま
                                す。
------------------------------- ---------------------------------------------
SCP_DESTPATH                    ログサーバへテストログをSCPで転送する際の転送
                                先ディレクトリをセットします。JenkinsのSCPプラ
                                グインの設定値として使われます。
=============================== =============================================


(2) sshキーの準備

1で設定値を変更していなければ、必要となるsshキーはgerrit_key、gerrit_key.pub、
jenkins_key、jenkins_key.pubになります。gerrit_key、gerrit_key.pubは、サービス
アカウントを取得した際に使用したものをコピーしてください。

    $ cp ~/id_rsa ofaci-inst/data/gerrit_key
    $ cp ~/id_rsa.pub ofaci-inst/data/gerrit_key.pub

jenkins_key、jenkins_key.pubは、以下のコマンドで新しいsshキーを作ることが
できます。

    $ cd ofaci-inst/data
    $ ssh-keygen -t rsa -b 1024 -N '' -f jenkins_key


マスターノードVM
^^^^^^^^^^^^^^^^

virt-managerを使い、以下の設定内容のVMを作成します。
Ubuntu 14.04 LTS Server 64bitのisoイメージ[5]が必要です。

====================== =====================================
Name                   master
---------------------- -------------------------------------
OS Type                Linux
---------------------- -------------------------------------
Version                Ubuntu 14.04 LTS (Precise Pangolin)
---------------------- -------------------------------------
Memory (RAM)           12288MB
---------------------- -------------------------------------
CPUs                   1
---------------------- -------------------------------------
Create a disk image    27GB
on the computer's 
hard driver
---------------------- -------------------------------------
Advanced options       Virutal network 'default': NAT
---------------------- -------------------------------------
Virt Type              kvm
---------------------- -------------------------------------
Architecture           x86_64
====================== =====================================

ルートパーティションの容量を圧迫しない様に /var, /usr 等は別
パーティションとして設定するのが良いと思われます。


5: http://releases.ubuntu.com/14.04/ubuntu-14.04-server-amd64.iso

OSインストール後、ネットワークの設定をDHCPからstatic指定に変更します。

    ubuntu@master:~$ sudo vi /etc/network/interfaces
    auto eth0
    iface eth0 inet static
            address 192.168.122.11
            netmask 255.255.255.0
            gateway 192.168.122.1
            dns-nameservers 192.168.122.1

/etc/hostsに以下の内容を追加します。

    ubuntu@master:~$ cat <<EOF >> /etc/hosts

    192.168.122.11 master zuul
    192.168.122.21 slave1
    192.168.122.22 slave2
    192.168.122.23 slave3
    192.168.122.24 slave4
    192.168.122.25 slave5
    192.168.122.26 slave6
    EOF

リブートするかネットワークインターフェイスを上げ直して設定内容を反映させ
ます。

    ubuntu@master:~$ sudo ifdown eth0
    ubuntu@master:~$ sudo ifup eth0

ホストからインストールスクリプトをコピーします。

    $ scp -r ofaci-inst ubuntu@192.168.122.10:

マスターノード用のインストールスクリプトを実行します。

    ubuntu@master:~$ cd ofaci-inst
    ubuntu@master:~/ofaci-inst$ ./install_node.sh master

ユーザjenkinsのホームディレクトリを設定します。

    ubuntu@master:~$ sudo service jenkins stop
    ubuntu@master:~$ sudo usermod -d /var/lib/jenkins -s /bin/bash jenkins
    ubuntu@master:~$ sudo service jenkins start

インストール結果を確認します。

* Gerritへのssh接続

    ubuntu@master:~$ sudo su - zuul
    zuul@master:~$ ssh -i /var/lib/zuul/ssh/id_rsa neutronryu@review.openstack.org -p 29418

      ****    Welcome to Gerrit Code Review    ****

      Hi Neutron Ryu, you have successfully connected over SSH.

      Unfortunately, interactive shells are disabled.
      To clone a hosted Git repository, use:

      git clone ssh://neutronryu@review.openstack.org:29418/REPOSITORY_NAME.git

    Connection to review.openstack.org closed.


* Zuulの設定内容

- /etc/zuul/zuul.conf

ubuntu@master:~$ sudo cat /etc/zuul/zuul.conf
[gearman]
server=127.0.0.1

[gearman_server]
start=true
log_config=/etc/zuul/gearman-logging.conf

[gerrit]
server=review.openstack.org
user=neutronryu
sshkey=/var/lib/zuul/ssh/id_rsa

[zuul]
layout_config=/etc/zuul/layout/layout.yaml
log_config=/etc/zuul/logging.conf
state_dir=/var/lib/zuul
git_dir=/var/lib/zuul/git
url_pattern=
status_url=http://master/zuul/status
job_name_in_report=true
zuul_url=http://master/p

[merger]
git_dir=/var/lib/zuul/git
zuul_url=http://master/p
log_config=/etc/zuul/merger-logging.conf
git_user_email=ryu-openstack-review@lists.sourceforge.net
git_user_name=Neutron Ryu


[smtp]
server=localhost
port=25
default_from=zuul@master
default_to=zuul.reports@master
ubuntu@master:~$


- /etc/zuul/layout.yaml

ubuntu@master:~$ sudo cat /etc/zuul/layout/layout.yaml
includes:
  - python-file: openstack_functions.py					1)

pipelines:
  - name: check								2)
    description: Newly uploaded patchsets enter this pipeline to receive an initial +/-1 Verified vote from Jenkins.
    failure-message: Build failed. Leave a comment with 'ryu-recheck' to rerun a check. (Also 'recheck' is available.)
    manager: IndependentPipelineManager
    precedence: low
    trigger:
      gerrit:
        - event: patchset-created
          branch: ^(master|feature/.*|stable/.*)$
        - event: change-restored
          branch: ^(master|feature/.*|stable/.*)$
        # Change "myvendor" below to your vendor's name to add a custom
        # recheck trigger that runs the check pipeline jobs when someone
        # adds a comment to a review that says "recheck $VENDOR".
        - event: comment-added						3)
          branch: ^(master|feature/.*|stable/.*)$
          comment: (?i)^(Patch Set [0-9]+:)?( [\w\\+-]*)*(\n\n)?\s*(ryu-recheck|recheck)\s*$
#        - event: comment-added
#          branch: ^(master|feature/.*|stable/.*)$
#          comment: (?i)^(Patch Set [0-9]+:)?( [\w\\+-]*)*(\n\n)?\s*recheck(( (?:bug|lp)[\s#:]*(\d+))|( myvendor))\s*$
    success:								4)
      gerrit:
        verified: 1
    failure:
      gerrit:
        verified: 0

jobs:
  - name: ^.*$
    parameter-function: set_node_options_default_trusty
  - name: ^check-tempest-dsvm-ofagent.*$				5)
    branch: ^(master|feature/).*$
    parameter-function: set_log_url
    success-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    failure-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    skip-if:								6)
      - project: ^openstack/
        all-files-match-any:
          - ^.*\.rst$
          - ^doc/.*$
          - ^tools/.*$
          - ^tox.ini$
  - name: ^check-tempest-dsvm-k-ofagent.*$				5)
    branch: ^(stable/kilo).*$
    #voting: false
    parameter-function: set_log_url
    success-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    failure-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    skip-if:
      - project: ^openstack/
        all-files-match-any:
          - ^.*\.rst$
          - ^doc/.*$
          - ^tools/.*$
          - ^tox.ini$
  - name: ^(check-tempest-dsvm-j-ofagent|check-tempest-dsvm-ryuplugin).*$	5)
    branch: ^(stable/juno).*$
    #voting: false
    parameter-function: set_log_url
    success-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    failure-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    skip-if:
      - project: ^openstack/
        all-files-match-any:
          - ^.*\.rst$
          - ^doc/.*$
          - ^tools/.*$
          - ^tox.ini$

projects:
  - name: openstack/neutron					7)
    check:
      - check-tempest-dsvm-ofagent
      - check-tempest-dsvm-k-ofagent
      - check-tempest-dsvm-j-ofagent
      - check-tempest-dsvm-ryuplugin
  - name: openstack/networking-ofagent				8)
    check:
      - check-tempest-dsvm-ofagent
      - check-tempest-dsvm-k-ofagent
      - check-tempest-dsvm-j-ofagent
  - name: openstack/networking-bgpvpn				9)
  - name: openstack/networking-cisco
  - name: openstack/networking-l2gw
  - name: openstack/networking-midonet
  - name: openstack/networking-odl
  - name: openstack/networking-ovn
  - name: openstack/neutron-fwaas
  - name: openstack/neutron-lbaas
  - name: openstack/neutron-vpnaas
  - name: openstack/neutron-specs
  - name: openstack/barbican
  - name: openstack/cinder
  - name: openstack/nova
  - name: openstack/oslo.config
  - name: openstack/oslo.db
  - name: openstack/oslo.messaging
  - name: openstack/oslo.rootwrap
  - name: openstack/oslo.utils
  - name: openstack/requirements
  - name: openstack/tempest
  - name: openstack-dev/devstack
  - name: openstack-infra/irc-meetings
  - name: openstack-infra/project-config
  - name: openstack-infra/system-config
  - name: stackforge/networking-6wind
  - name: stackforge/networking-arista
  - name: stackforge/networking-bagpipe-l2
  - name: stackforge/networking-bigswitch
  - name: stackforge/networking-brocade
  - name: stackforge/networking-edge-vpn
  - name: stackforge/networking-hyperv
  - name: stackforge/networking-ibm
  - name: stackforge/networking-mlnx
  - name: stackforge/networking-nec
  - name: stackforge/networking-ovs-dpdk
  - name: stackforge/networking-plumgrid
  - name: stackforge/networking-portforwarding
  - name: stackforge/networking-vsphere
  - name: stackforge/networking-zvm
ubuntu@master:~$


上記では ofagent, ryup-lugin の master と stable branch の job を動作さ
せる場合の設定例を示しています。

1) include するマクロを指定
2) ofagent, ryu-plugin 用のチェックキュー定義
3) コメント追加時の振る舞いを定義
4) job 成功、失敗時の振る舞いを定義
   例では、成功時に +1, 失敗時には何もしない
   コメントアウトしていると、成功、失敗時に何もしない。
5) job の定義
   処理する branch(ここで対象とする branch を指定する)
   ログのパスを得るマクロ(set_log_url)の指定
   成功、失敗時の表示形式
6) 処理対象のフィルタリング。指定ファイルは無視される。
7) neutron からのトリガで処理する job 名を定義
8) kilo 以降では ofagent のリポジトリが networking-ofagent に分離しているので、
   networking-ofagent からのトリガも処理
9) zuul で cross-dependency のトリガを処理する為に、トリガの掛かりそうな
   関連するプロジェクトの名前を列記。これは名前解決の為なので処理は書かない。

check キューを複数処理する例のサンプルが下記より参照できます。
ofagent, ryup-lugin と 検証用に ovs-native の job を動作させる
場合の設定例になります。ofagent, ryup-lugin と ovs-native が別
キューによる管理となっています。

https://raw.github.com/osrg/ofaci-inst/master/samples/layout.yaml.add_ovs_native_job


* Jenkinsの設定内容

ブラウザでマスターノードのポート8080番に接続してJenkinsのGUIを表示します。

Juno リリース以前の場合の確認
- ジョブcheck-tempest-dsvm-ofagentとcheck-tempest-dsvm-ryupluginが登録
  されていることを確認します [Fig1]
- Manage Jenkins(Jenkinsの管理) > Manage Plugins(プラグインの管理) > Installed
  (インストール済み)から「Jenkins SCP publisher plugin」が導入されてい
  ることを確認します [Fig2]
- ジョブcheck-tempest-dsvm-ofagentの設定内容を確認します [Fig3]
- ジョブcheck-tempest-dsvm-ryupluginの設定内容を確認します [Fig4]
- Manage Jenkins(Jenkinsの管理) > Configure System(システムの設定)からSCP
  repository hostsの設定内容を確認します [Fig5]
  (現在パスワードは使用していません)
- Manage Jenkins(Jenkinsの管理) > Manage Credentials から認証情報を確認します
  [Fig6]

Build Execute shell の 3番目のサンプルファイルが下記より参照できます。
- juno の ofagent 用
    https://raw.github.com/osrg/ofaci-inst/master/samples/jenkins_build_shell.ofa.juno
- ryu-plugin 用(juno まで)
    https://raw.github.com/osrg/ofaci-inst/master/samples/jenkins_build_shell.ryu

Kilo リリース以降の場合の確認
- ジョブcheck-tempest-dsvm-ofagentとcheck-tempest-dsvm-ryupluginが登録
  されていることを確認します [Fig1]
- Manage Jenkins(Jenkinsの管理) > Manage Plugins(プラグインの管理) > Installed
  (インストール済み)から「Jenkins SCP publisher plugin」が導入されてい
  ることを確認します [Fig2]
- ジョブcheck-tempest-dsvm-ofagentの設定内容を確認します [Fig3]
  devtstack-gate は master を使用する設定になっています。
- ジョブcheck-tempest-dsvm-ryupluginの設定内容を確認します [Fig4]
  juno リリース以前の CI との互換の為残しています。ryu plugin は kilo 
  で削除されたので本ジョブは削除します。
- Manage Jenkins(Jenkinsの管理) > Configure System(システムの設定)からSCP
  repository hostsの設定内容を確認します [Fig5]
  (現在パスワードは使用していません)
- Manage Jenkins(Jenkinsの管理) > Manage Credentials から認証情報を確認します
  [Fig6]

Build Execute shell の 3番目のサンプルファイルが下記より参照できます。
- kilo 以降の ofagent 用
    https://raw.github.com/osrg/ofaci-inst/master/samples/jenkins_build_shell.ofa


*注意*
    Jenkinsのセキュリティ設定は行わないでください。

    現状のスクリプトでは、スレーブノードからの接続ができなくなり、onlineに
    することができなくなります。

*注意*
    /etc/zuul/layout/layout.yaml の jobs: で指定する結果転送先のアドレ
    スは実際のログサーバアドレスを設定して下さい。


スレーブノードVM
^^^^^^^^^^^^^^^^

virt-managerを使い、以下の設定内容のVMを作成します。

====================== =====================================
Name                   slave1
---------------------- -------------------------------------
OS Type                Linux
---------------------- -------------------------------------
Version                Ubuntu 12.04 LTS (Precise Pangolin)
---------------------- -------------------------------------
Memory (RAM)           2048MB
---------------------- -------------------------------------
CPUs                   1
---------------------- -------------------------------------
Create a disk image    40GB
on the computer's 
hard driver
---------------------- -------------------------------------
Advanced options       Virutal network 'default': NAT
---------------------- -------------------------------------
Virt Type              kvm
---------------------- -------------------------------------
Architecture           x86_64
====================== =====================================

OSインストール後、ネットワークの設定をDHCPからstatic指定に変更します。

    ubuntu@slave1:~$ sudo vi /etc/network/interfaces
    auto eth0
    iface eth0 inet static
            address 192.168.122.21
            netmask 255.255.255.0
            gateway 192.168.122.1
            dns-nameservers 192.168.122.1

/etc/hostsに以下の内容を追加します。

    ubuntu@slave1:~$ cat <<EOF >> /etc/hosts
    192.168.122.10 master
    192.168.122.21 slave1
    192.168.122.22 slave2
    192.168.122.23 slave3
    192.168.122.24 slave4
    192.168.122.25 slave5
    192.168.122.26 slave6
    EOF

リブートするかネットワークインターフェイスを上げ直して設定内容を反映させ
ます。

    ubuntu@slave1:~$ sudo ifdown eth0
    ubuntu@slave1:~$ sudo ifup eth0

ホストからインストールスクリプトをコピーします。

    $ scp -r ofaci-inst ubuntu@192.168.122.21:

スレーブノード用のインストールスクリプトを実行します。

    ubuntu@slave1:~$ cd ofaci-inst
    ubuntu@slave1:~/ofaci-inst$ ./install_node.sh slave

インストール結果を確認します。

    ubuntu@slave1:~$ sudo ovs-appctl version
    ovs-vswitchd (Open vSwitch) 2.1.0
    Compiled Mar 25 2014 19:31:05
    ubuntu@slave1:~/ryu-neutron-zuul-ci.custom$ dpkg -l | grep dnsmasq
    ii  dnsmasq                              2.68-1                            Small caching DNS proxy and DHCP/TFTP server
    ii  dnsmasq-base                         2.68-1                            Small caching DNS proxy and DHCP/TFTP server
    ii  dnsmasq-utils                        2.68-1                            Utilities for manipulating DHCP leases
    ubuntu@slave1:~$ sudo ls -l /home/jenkins/
    total 12
    drwxr-xr-x 4 jenkins jenkins 4096 Mar 26 15:49 cache
    drwxr-xr-x 2 jenkins jenkins 4096 Mar 26 15:28 devstack-gate
    drwxr-xr-x 2 jenkins jenkins 4096 Mar 26 15:28 ovs2.1.0
    ubuntu@slave1:~$ ls -l /usr/local/bin/rebuild-node.sh
    -rwxr-xr-x 1 root root 38 Mar 26 15:23 /usr/local/bin/rebuild-node.sh
    ubuntu@slave1:~$ sudo service jenkins-slave help
    jenkins-slave [start|stop|connect|disconnect|online|offline]
    ubuntu@slave1:~$ ls -l /opt/
    total 12
    drwxr-xr-x 7 root root 4096 Mar 26 15:49 git
    drwxr-xr-x 2 root root 4096 Mar 26 15:28 nodepool-scripts
    drwxr-xr-x 4 root root 4096 Mar 26 15:23 requirements
    ubuntu@slave1:~$ ls -l /opt/git/
    total 20
    drwxr-xr-x  83 root root 4096 Mar 26 15:42 openstack
    drwxr-xr-x  12 root root 4096 Mar 26 15:29 openstack-dev
    drwxr-xr-x  42 root root 4096 Mar 26 15:31 openstack-infra
    drwxr-xr-x   3 root root 4096 Mar 26 15:49 osrg
    drwxr-xr-x 129 root root 4096 Mar 26 15:49 stackforge

同様に残り5台のスレーブノードのVMも構築します。IPアドレスのみ各々で異なり
ます。

======== ==============
ホスト名 IPアドレス
-------- --------------
slave1   192.168.122.21
-------- --------------
slave2   192.168.122.22
-------- --------------
slave3   192.168.122.23
-------- --------------
slave4   192.168.122.24
-------- --------------
slave5   192.168.122.25
-------- --------------
slave6   192.168.122.26
======== ==============

必要に応じ前述の Build Execute shell 3 でダウンロードしているファイルを
下記ディレクトリに置いておくとダウンロードの処理を省略できます。
    /home/jenkins/workspaces/workspace/check-tempest-dsvm-ofagent/
対象は現時点では下記ファイル
    81-tempest.sh, features.yaml, get_ofalog.sh

*注意*
    下記ファイルの内容は最新のものに変える必要が有ります。
        /home/jenkins/.pip/pip.conf
        /home/jenkins/.pip/.pydistutils.cfg
    各々最新の system-config リポジトリの下記のファイル内容に更新します。
    system-config のバージョンによっては同じ内容かもしれません。
        system-config/modules/openstack_project/files/pip.conf
        system-config/modules/openstack_project/files/pydistutils.cfg


Jenkinsへのスレーブノードの登録
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ブラウザでマスターノードのポート8080番に接続してJenkinsのGUIを表示します。

- Manage Jenkins(Jenkinsの管理) > Manage Nodes(ノードの管理) からノード管理
  画面を表示します [Fig8-1]
- New Node(新規ノード作成)をクリックしてノード登録画面を表示し、Node name
  (ノード名)に「slave1」、「Dumb Slave(ダムスレーブ)」を選択してOKボタンを
  クリックします [Fig8-2]
- 以下の内容で設定し、Saveボタンをクリックします [Fig8-3]

    ================================ ========================================
    Name(ノード名)                   slave1
    -------------------------------- ----------------------------------------
    # of executores(同時ビルド数)    1
    -------------------------------- ----------------------------------------
    Remote FS root(リモートFSルート) /home/jenkins/workspaces
    -------------------------------- ----------------------------------------
    Labels(ラベル)                   devstack_slave
    -------------------------------- ----------------------------------------
    Usage(用途)                      Utilize this slave as much as possible
                                     (このスレーブをできるだけ利用する)
    -------------------------------- ----------------------------------------
    Launch method(起動方法)          Launch slave agents on Unix machines via
                                     SSH
                                     (SSH経由でUnixマシンのスレーブエージェン
                                     トを起動)
    -------------------------------- ----------------------------------------
    Host(ホスト)                     192.168.122.21
    -------------------------------- ----------------------------------------
    Credentials(認証情報)            jenkins
    -------------------------------- ----------------------------------------
    Availability(可用性)             Keep this slave on-line as much as
                                     possible
                                     (可能な限りオンラインのままにする)
    ================================ ========================================

- 同様にslave2〜6を登録します。ノード登録画面で「Copy Existing Node(ノードを
  コピー)」を選択すると登録済みノードの設定内容を初期値として引き継いで登録
  を行うことができます。この場合、ノード名とIPアドレスのみ設定を変更するだけ
  で済みます。

登録が済むとノード一覧に登録したスレーブノードが表示されますが、この時点では
offline状態になっています。[Fig8-4]
各スレーブノードをリブートするか、次の操作を行うことでオンラインにします。

    ubuntu@slave1:~$ sudo service jenkins-slave start

すべてのスレーブノードがオンラインになったことを確認します。[Fig8-5]


ログサーバ
----------

ログサーバでは、テストサーバからログファイルの転送を受け付けるためのsshの
設定とログファイルをWeb経由で公開するためのApacheの設定を行います。


sshの設定
^^^^^^^^^

ユーザjenkinsでSCP接続されるので、ユーザを作成します。

    $ sudo useradd -m -s /bin/bash jenkins

ssh鍵でログインできるようにauthorized_keysを設定します。

    $ sudo mkdir /home/jenkins/.ssh
    $ sudo cp id_rsa.pub /home/jenkins/.ssh/authorized_keys
    $ sudo chmod og-rw /home/jenkins/.ssh/authorized_keys
    $ sudo chown -R jenkins.jenkins /home/jenkins/.ssh

このid_rsa.pubは、テストサーバのofaci-inst/data/jenkins_key.pubをコピー
したものです。

sshサーバは、パスワード認証を無効にしておきます。

    $ sudo vi /etc/ssh/sshd_config
    PasswordAuthentication no
    $ sudo service ssh reload


apacheの設定
^^^^^^^^^^^^

ログ公開用ディレクトリを作成します。

    $ sudo mkdir /data/ryuci
    $ sudo chown jenkins.jenkins /data/ryuci

ログ公開用ディレクトリの設定を追加します。

    $ sudo vi /etc/apache2/sites-enabled/000-default
<VirtualHost *:80>
        ServerAdmin webmaster@localhost

        DocumentRoot /var/www/
        <Directory />
                Options FollowSymLinks
                AllowOverride None
                Order Deny,Allow
                Deny from all
        </Directory>

        Alias /ryuci/icons/ /usr/share/apache2/icons/
        Alias /ryuci /data/ryuci
        <Directory /data/ryuci>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride Indexes
                Order Allow,Deny
                Allow from all
                IndexOptions +Charset=UTF-8 +FancyIndexing +IgnoreCase +FoldersFirst +SuppressHTMLPreamble +XHTML +HTMLTable +SuppressRules +SuppressDescription +NameWidth=*
                HeaderName /ryuci/theme/header.html
                ReadmeName /ryuci/theme/readme.html
                IndexIgnore /ryuci/theme
        </Directory>

        #ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
        #<Directory "/usr/lib/cgi-bin">
        #       AllowOverride None
        #       Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        #       Order allow,deny
        #       Allow from all
        #</Directory>

        ErrorLog ${APACHE_LOG_DIR}/error.log

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel warn

        CustomLog ${APACHE_LOG_DIR}/access.log combined

</VirtualHost>

ログファイルの公開は、単純にmod_autoindexでディレクトリインデックスを
表示させます。ログサーバへのアクセスは、前段のnginxによって
http://180.37.183.32/ryuci を条件として振り分けられるため、ルートは/ryuci
となる必要があります。
autoindexでは、
- ページのタイトルと先頭に表示中のディレクトリのパスが表示されますが、
  ルートは"/"となり、変更できない
- ファイル/ディレクトリの先頭に表示されるアイコンのデフォルトのパスが"/"
  になっている
- 親ディレクトリへのリンク「Parent Directory」が最終的に"/"へのリンクに
  なる
という問題があり、ここでは若干強引に対処しています。

- ページの先頭に表示されるパス

  オプション HeaderName で表示内容を変更します。
  /data/ryuci/theme/header.htmlを以下の内容で作成します。

    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <title>Neutron Ryu CI</title>
    <style>
    html {
      min-height: 100%;
      color: #404040;
      font-weight: 400;
      font-size: 1em;
      font-family: sans-serif;
    }
    body {
      padding: 20px;
    }
    a {
      color: #404080;
      text-decoration: none;
    }
    table {
      width: 700px;
      border-collapse: collapse;
      font-size: .8em;
    }
    tr {
      outline: 0;
      border: 0;
    }
    tr:hover td {
      background: #f6f6f6;
    }
    th {
      text-align: left;
      font-size: .8em;
      padding-right: 20px;
      border-bottom: 2px solid #c0c0c0;
    }
    th + th {
      width: 65%;
    }
    th + th + th {
    }
    th + th + th + th {
      width: 5%;
    }
    tr td:first-of-type {
      padding-left: 10px;
      padding-right: 10px;
    }
    td {
      padding: 5px 0;
      outline: 0;
      border-bottom: 1px solid #c0c0c0;
      vertical-align: middle;
      text-align: left;
    }
    </style>
    </head>
    <body>
    <H3>Neutron Ryu CI Results</H3>

  タイトルを変更するため、IndexOptionsに +SuppressHTMLPreamble を追加しま
  すが、そうすると</html>なども出力されなくなるため、オプションReadmeName 
  を設定し、以下の内容で/ryuci/theme/readme.htmlを作成します。

    </body>
    </html>

- アイコンのパス

  /etc/apache2/mods-enabled/autoindex.confの"/icons"をすべて"/ryuci/icons"
  に置換します。

- 最上位の親ディレクトリ

  /ryuci/ではディレクトリインデックスが表示されないように、以下の内容で
  /data/ryuci/index.htmlを作成します。

    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <title>Neutron Ryu CI</title>
    <style>
    html {
      min-height: 100%;
      color: #404040;
      font-weight: 400;
      font-size: 1em;
      font-family: sans-serif;
    }
    body {
      padding: 20px;
    }
    a {
      color: #404080;
      text-decoration: none;
    }
    table {
      width: 700px;
      border-collapse: collapse;
      font-size: .8em;
    }
    tr {
      outline: 0;
      border: 0;
    }
    tr:hover td {
      background: #f6f6f6;
    }
    th {
      text-align: left;
      font-size: .8em;
      padding-right: 20px;
      border-bottom: 2px solid #c0c0c0;
    }
    th + th {
      width: 65%;
    }
    th + th + th {
    }
    th + th + th + th {
      width: 5%;
    }
    tr td:first-of-type {
      padding-left: 10px;
      padding-right: 10px;
    }
    td {
      padding: 5px 0;
      outline: 0;
      border-bottom: 1px solid #c0c0c0;
      vertical-align: middle;
      text-align: left;
    }
    </style>
    </head>
    <body>
    <H3>Neutron Ryu CI Results</H3>
    </body>
    </html>

不要な情報を提供しないように、Apacheの設定を変更します。

    $ sudo vi /etc/apache2/conf.d/security
    ServerTokens Prod
    ServerSignature Off
    TraceEnable Off

Apacheを再起動します。

    $ sudo service apache2 restart


Zuulの起動
----------

zuulとzuul-mergerの起動
^^^^^^^^^^^^^^^^^^^^^^^

zuulとzuul-mergerを起動します。

    ubuntu@master:~$ sudo service zuul start
    ubuntu@master:~$ sudo service zuul-merger start

起動したことを確認します。

    ubuntu@master:~$ sudo service zuul status
     * zuul is running
    ubuntu@master:~$ sudo service zuul-merger status
     * zuul-merger is running


Gearmanクライアントの有効化
^^^^^^^^^^^^^^^^^^^^^^^^^^^

JenkinsのGearmanクライアントを有効にして、Zuulと連動するようにします。

Manage Jenkins(Jenkinsの管理) > Configure System(システムの設定)から
Gearman Plugin Configを表示し、Enable Gearmanをチェックし、Saveボタンを
クリックします。 [Fig7]


zuulの状態確認
^^^^^^^^^^^^^^

zuulのデバッグログでGerritストリームイベントを処理していることが確認で
きます。

    ubuntu@master:~$ sudo tail -f /var/log/zuul/debug.log
    2014-04-02 18:10:22,858 DEBUG zuul.Scheduler: Processing trigger event
     <TriggerEvent comment-added openstack/neutron master 84667,1>
    2014-04-02 18:10:22,858 DEBUG zuul.IndependentPipelineManager: Startin
    g queue processor: check
    2014-04-02 18:10:22,858 DEBUG zuul.IndependentPipelineManager: Finishe
    d queue processor: check (changed: False)
    2014-04-02 18:10:22,858 DEBUG zuul.Scheduler: Run handler sleeping
    2014-04-02 18:10:22,859 DEBUG zuul.Scheduler: Done adding trigger even
    t: <TriggerEvent comment-added openstack/neutron master 84667,1>

また、zuulの状態はステータスページで確認することもできます。
ブラウザでマスターノード(192.168.122.10:80)にアクセスするとステータスペー
ジが確認できます。

実行中のテストの状態は、Jenkinsの画面で確認できます。

この時点では、テスト結果のGerritへの報告(vote)は無効になっています。有
効にするには、/etc/zuul/layout/layout.yamlの以下の部分のコメントを外し
ます。

    #    success:
    #      gerrit:
    #        verified: 1
    #    failure:
    #      gerrit:
    #        verified: 0

verifiedの値がスコアになります。本来、failureの場合は-1を与えますが、現
状Third party での voting は推奨されないので0のままで良いようです。
詳細は下記 URL "Third Party CI Voting" 参照。

http://git.openstack.org/cgit/openstack/neutron/tree/doc/source/policies/thirdparty-ci.rst


stable CI 環境の追加
--------------------

stable 版の OpenStack に対してもテストを行う必要があります。
2通りの方法について説明します。

現状の master ノードに job を追加する場合
-----------------------------------------

現状、初期イメージの VM で起動する仕組みを利用している為、jenkins 設定
と master ノードの zuul 設定を修正するだけで良い。下記の要領で行う。

- stable job の作成
  Jenkins ダッシュボード -> 新規ジョブ作成
  で
 「ジョブ名」に新規ジョブ名
    (現在の命名 check-tempest-dsvm-x-ofagent。x はリリース名頭文字)
 「既存ジョブのコピー」に現在の master のジョブ名
    (現在 check-tempest-dsvm-ofagent)
  job の説明と必要なら Execute Build Shell 等の編集を行う。

- zuul 設定修正
  前述「Zuulの設定内容」- /etc/zuul/layout.yaml の説明で下記の修正を行う。

  - 5) の部分を該当の stable 名で追加する。
  - 7), 8) のセクションに追加する job 名を追加する。

- zuul のリスタート

  # service zuul-merger stop
  # service zuul stop
  # service zuul start
  # service zuul-merger start

  運用中で落とせない場合は

  # service zuul reload


新たに stable 用の master/slave VM の構築する場合
-------------------------------------------------

何らかの理由で別途テスト環境を分けて用意する場合は下記の手順で行える。

stable 用 VM の作成
^^^^^^^^^^^^^^^^^^^

上述の構築手順に従い新たに master/slave を一つずつ作成。
ホスト名、IPアドレスは重ならない様には適宜設定。
取り敢えずは下記のパターンを想定している。
- ホスト名はリリース名の頭文字
- master IP は連番
- slave IP は十番台の番号の連番

======== ==============
ホスト名 IPアドレス
-------- --------------
lmaster  192.168.122.12
-------- --------------
llave1   192.168.122.31
======== ==============

前述「Zuulの設定内容」- /etc/zuul/layout.yaml の説明で下記の修正を行う。

- 5) の先頭の job 定義(check-tempest-dsvm-ofagent)部分を該当の stable 名
  に修正する。他の余分な job 定義は削除する。
- 7), 8) の部分で check-tempest-dsvm-ofagent 以外は削除する。

stable/mitaka を追加する場合の /etc/zuul/layout/layout.yaml の修正例

...
    failure:
      gerrit:
        verified: 0

jobs:
  - name: ^.*$
    parameter-function: set_node_options_default_trusty
  - name: ^check-tempest-dsvm-ofagent.*$
    branch: ^(stable/mitaka).*$				<-- 修正
    parameter-function: set_log_url
    success-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    failure-pattern: http://180.37.183.32/ryuci/{build.parameters[LOG_PATH]}
    skip-if:
      - project: ^openstack/
        all-files-match-any:
          - ^.*\.rst$
          - ^doc/.*$
          - ^tools/.*$
          - ^tox.ini$

projects:
  - name: openstack/neutron
    check:
      - check-tempest-dsvm-ofagent
  - name: openstack/networking-ofagent
    check:
      - check-tempest-dsvm-ofagent
  - name: openstack/networking-bgpvpn
  - name: openstack/networking-cisco
...


新しい stable への切り替え
^^^^^^^^^^^^^^^^^^^^^^^^^^

次の stable 版 release のタイミングで master 環境の jenkins job を一時
停止し、下記の方法で stable 用 VM を手動で更新する。

- master 環境の slave VM を clone して stable 環境の slave VM と取り換
  え ip アドレス等を stable 用に修正する。
- stable 用の jenkins 上で slave node を新規に追加。

master VM 内の /etc/zuul/layout/layout.yaml の現在の stable フィルタを
新しい stable フィルタに修正する。5) の部分。


以上
